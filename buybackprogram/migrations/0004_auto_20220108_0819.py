# Generated by Django 3.2.10 on 2022-01-08 08:19

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("eveuniverse", "0005_type_materials_and_sections"),
        ("buybackprogram", "0003_auto_20220106_1734"),
    ]

    operations = [
        migrations.AlterField(
            model_name="location",
            name="eve_solar_system",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="System where the buyback structure is located",
                null=True,
                on_delete=django.db.models.deletion.SET_DEFAULT,
                related_name="+",
                to="eveuniverse.evesolarsystem",
                verbose_name="Solar system",
            ),
        ),
        migrations.AlterField(
            model_name="location",
            name="owner",
            field=models.ForeignKey(
                help_text="Player managing this location",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="buybackprogram.owner",
                verbose_name="Manager",
            ),
        ),
        migrations.AlterField(
            model_name="location",
            name="structure_id",
            field=models.BigIntegerField(
                blank=True,
                default=None,
                help_text="The ID for the structure you wish to accept the contracts at. If left empty the program statistics page will not track if the contract is actually made at the correct structure or not. To get the ID for the structure see readme for getting structure IDs",
                null=True,
                verbose_name="Ingame unique ID for structure",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="allow_unpacked_items",
            field=models.BooleanField(
                default=False,
                help_text="Do you want to allow unpacked items in this program such as assembled ship hulls?",
                verbose_name="Allow unpacked items",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="hauling_fuel_cost",
            field=models.IntegerField(
                default=0,
                help_text="ISK per m続 that will be removed from the buy price ie. to cover jump freighet fuel costs. <b>Should not be used with price dencity modifier</b>",
                verbose_name="Hauling fuel cost per m続",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="is_corporation",
            field=models.BooleanField(
                default=False,
                help_text="If we should use the corporation of the manager as the contract receiver instead of the character.",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="location",
            field=models.ForeignKey(
                help_text="The location where contracts should be created at.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="buybackprogram.location",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="owner",
            field=models.ForeignKey(
                help_text="Character that is used to manage this program.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="buybackprogram.owner",
                verbose_name="Manager",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="price_dencity_modifier",
            field=models.BooleanField(
                default=False,
                help_text="Should we modify buy prices for items with high volume and low value ie. T1 industrial hulls. <b>Should not be used with hauling fuel cost</b>",
                verbose_name="Price density modifier",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="price_dencity_tax",
            field=models.IntegerField(
                default=0,
                help_text="How much tax do we apply on the low isk density items.",
                null=True,
                validators=[
                    django.core.validators.MaxValueValidator(100),
                    django.core.validators.MinValueValidator(0),
                ],
                verbose_name="Price density tax",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="price_dencity_treshold",
            field=models.IntegerField(
                default=0,
                help_text="At what ISK/m3 do we start to apply the low isk dencity tax. Tritanium is 500 ISK/m続 @ 5 ISK per unit price. PLEX is 14,5Trillion ISK/m続 @2.9M per unit price.",
                null=True,
                verbose_name="Price density threshold",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="refining_rate",
            field=models.IntegerField(
                default=0,
                help_text="Refining rate to be used if ore refined value is active",
                null=True,
                validators=[
                    django.core.validators.MaxValueValidator(100),
                    django.core.validators.MinValueValidator(0),
                ],
                verbose_name="Refining rate",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="tax",
            field=models.IntegerField(
                default=0,
                help_text="A default tax rate in this program that is applied on all items.",
                validators=[
                    django.core.validators.MaxValueValidator(100),
                    django.core.validators.MinValueValidator(0),
                ],
                verbose_name="Default tax",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="use_compressed_value",
            field=models.BooleanField(
                default=False,
                help_text="Take compressed value into account when calculating prices for ore, ice and moon goo",
                verbose_name="Ore: Use compressed value",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="use_raw_ore_value",
            field=models.BooleanField(
                default=True,
                help_text="Take raw ore value into account when calculating prices for ore, ice and moon goo",
                verbose_name="Ore: Use raw value",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="use_refined_value",
            field=models.BooleanField(
                default=False,
                help_text="Take refined value into account when calculating prices for ore, ice and moon goo",
                verbose_name="Ore: Use refined value",
            ),
        ),
        migrations.AlterField(
            model_name="programitem",
            name="disallow_item",
            field=models.BooleanField(
                default=False,
                help_text="You can disallow an item from a buyback location. It will return 0 price if disallowed.",
                verbose_name="Disallow item in program",
            ),
        ),
        migrations.AlterField(
            model_name="programitem",
            name="item_tax",
            field=models.IntegerField(
                default=0,
                help_text="How much do you want to adjust the default tax on this item. Can be a positive or a negative value.",
                null=True,
                validators=[
                    django.core.validators.MaxValueValidator(100),
                    django.core.validators.MinValueValidator(-100),
                ],
                verbose_name="Item tax adjustment",
            ),
        ),
    ]
