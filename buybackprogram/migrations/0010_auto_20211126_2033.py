# Generated by Django 3.2.8 on 2021-11-26 20:33

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("buybackprogram", "0009_auto_20211115_1823"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="programitem",
            name="use_compressed_value",
        ),
        migrations.RemoveField(
            model_name="programitem",
            name="use_raw_value",
        ),
        migrations.RemoveField(
            model_name="programitem",
            name="use_refined_value",
        ),
        migrations.AddField(
            model_name="program",
            name="hauling_fuel_cost",
            field=models.IntegerField(
                default=0,
                help_text="ISK per m³ that will be removed from the buy price ie. to cover jump freighet fuel costs",
            ),
        ),
        migrations.AddField(
            model_name="program",
            name="isk_cubic_tax",
            field=models.IntegerField(
                default=0,
                help_text="How much tax do we apply on the low isk dencity items.",
                null=True,
                validators=[
                    django.core.validators.MaxValueValidator(100),
                    django.core.validators.MinValueValidator(1),
                ],
            ),
        ),
        migrations.AddField(
            model_name="program",
            name="isk_cubic_treshold",
            field=models.IntegerField(
                default=0,
                help_text="At what ISK/m3 do we start to apply the low isk dencity tax. Tritanium is 500 ISK/m³ @ 5 ISK per unit price. PLEX is 14,5Trillion ISK/m³ @2.9M per unit price.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="program",
            name="price_dencity_modifier",
            field=models.BooleanField(
                default=False,
                help_text="Should we modify buy prices for items with high volume and low value ie. T1 industrial hulls",
            ),
        ),
        migrations.AddField(
            model_name="program",
            name="use_compressed_value",
            field=models.BooleanField(
                default=False,
                help_text="Take compressed value into account when calculating prices for ore, ice and moon goo",
            ),
        ),
        migrations.AddField(
            model_name="program",
            name="use_raw_value",
            field=models.BooleanField(
                default=True,
                help_text="Take raw value into account when calculating prices for ore, ice and moon goo",
            ),
        ),
        migrations.AddField(
            model_name="program",
            name="use_refined_value",
            field=models.BooleanField(
                default=False,
                help_text="Take refined value into account when calculating prices for ore, ice and moon goo",
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="allow_all_items",
            field=models.BooleanField(
                default=True,
                help_text="If true all items are accepted in this program with the default tax unless an item tax is spesified. Blueprints are not included in all items.",
            ),
        ),
    ]
